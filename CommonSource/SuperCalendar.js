// Generated by CoffeeScript 1.8.0
(function() {
  var Animals, AstronomyInfo, Gan, LunarInfo, SolarMonth, SolarTerm, Zhi, getAnimal, getAstronomy, getSolarTerm, leapMonth, leapMonthDays, lunar2solar, lunarMonthDays, lunarYearDays, nStr1, nStr2, nStr3, sTermInfo, solar2lunar, solarDays, toChinaDay, toChinaMonth, toGanZhi;

  LunarInfo = [0x04bd8, 0x04ae0, 0x0a570, 0x054d5, 0x0d260, 0x0d950, 0x16554, 0x056a0, 0x09ad0, 0x055d2, 0x04ae0, 0x0a5b6, 0x0a4d0, 0x0d250, 0x1d255, 0x0b540, 0x0d6a0, 0x0ada2, 0x095b0, 0x14977, 0x04970, 0x0a4b0, 0x0b4b5, 0x06a50, 0x06d40, 0x1ab54, 0x02b60, 0x09570, 0x052f2, 0x04970, 0x06566, 0x0d4a0, 0x0ea50, 0x06e95, 0x05ad0, 0x02b60, 0x186e3, 0x092e0, 0x1c8d7, 0x0c950, 0x0d4a0, 0x1d8a6, 0x0b550, 0x056a0, 0x1a5b4, 0x025d0, 0x092d0, 0x0d2b2, 0x0a950, 0x0b557, 0x06ca0, 0x0b550, 0x15355, 0x04da0, 0x0a5b0, 0x14573, 0x052b0, 0x0a9a8, 0x0e950, 0x06aa0, 0x0aea6, 0x0ab50, 0x04b60, 0x0aae4, 0x0a570, 0x05260, 0x0f263, 0x0d950, 0x05b57, 0x056a0, 0x096d0, 0x04dd5, 0x04ad0, 0x0a4d0, 0x0d4d4, 0x0d250, 0x0d558, 0x0b540, 0x0b6a0, 0x195a6, 0x095b0, 0x049b0, 0x0a974, 0x0a4b0, 0x0b27a, 0x06a50, 0x06d40, 0x0af46, 0x0ab60, 0x09570, 0x04af5, 0x04970, 0x064b0, 0x074a3, 0x0ea50, 0x06b58, 0x055c0, 0x0ab60, 0x096d5, 0x092e0, 0x0c960, 0x0d954, 0x0d4a0, 0x0da50, 0x07552, 0x056a0, 0x0abb7, 0x025d0, 0x092d0, 0x0cab5, 0x0a950, 0x0b4a0, 0x0baa4, 0x0ad50, 0x055d9, 0x04ba0, 0x0a5b0, 0x15176, 0x052b0, 0x0a930, 0x07954, 0x06aa0, 0x0ad50, 0x05b52, 0x04b60, 0x0a6e6, 0x0a4e0, 0x0d260, 0x0ea65, 0x0d530, 0x05aa0, 0x076a3, 0x096d0, 0x04bd7, 0x04ad0, 0x0a4d0, 0x1d0b6, 0x0d250, 0x0d520, 0x0dd45, 0x0b5a0, 0x056d0, 0x055b2, 0x049b0, 0x0a577, 0x0a4b0, 0x0aa50, 0x1b255, 0x06d20, 0x0ada0, 0x14b63, 0x09370, 0x049f8, 0x04970, 0x064b0, 0x168a6, 0x0ea50, 0x06b20, 0x1a6c4, 0x0aae0, 0x0a2e0, 0x0d2e3, 0x0c960, 0x0d557, 0x0d4a0, 0x0da50, 0x05d55, 0x056a0, 0x0a6d0, 0x055d4, 0x052d0, 0x0a9b8, 0x0a950, 0x0b4a0, 0x0b6a6, 0x0ad50, 0x055a0, 0x0aba4, 0x0a5b0, 0x052b0, 0x0b273, 0x06930, 0x07337, 0x06aa0, 0x0ad50, 0x14b55, 0x04b60, 0x0a570, 0x054e4, 0x0d160, 0x0e968, 0x0d520, 0x0daa0, 0x16aa6, 0x056d0, 0x04ae0, 0x0a9d4, 0x0a2d0, 0x0d150, 0x0f252, 0x0d520];

  SolarMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];

  Gan = ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸'];

  Zhi = ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥'];

  Animals = ['鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪'];

  SolarTerm = ['小寒', '大寒', '立春', '雨水', '惊蛰', '春分', '清明', '谷雨', '立夏', '小满', '芒种', '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪', '冬至'];

  AstronomyInfo = [
    {
      1223: '摩羯座'
    }, {
      121: '水瓶座'
    }, {
      220: '双鱼座'
    }, {
      321: '牡羊座'
    }, {
      421: '金牛座'
    }, {
      522: '双子座'
    }, {
      622: '巨蟹座'
    }, {
      724: '狮子座'
    }, {
      824: '处女座'
    }, {
      924: '天秤座'
    }, {
      1024: '天蝎座'
    }, {
      1123: '射手座'
    }, {
      1223: '摩羯座'
    }
  ];

  sTermInfo = ['9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd0b06bdb0722c965ce1cfcc920f', 'b027097bd097c36b0b6fc9274c91aa', '9778397bd19801ec9210c965cc920e', '97b6b97bd19801ec95f8c965cc920f', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd197c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bd09801d98082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec95f8c965cc920e', '97bcf97c3598082c95f8e1cfcc920f', '97bd097bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c3598082c95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf97c359801ec95f8c965cc920f', '97bd097bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd19801ec9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e', '97b6b97bd19801ec95f8c965cc920f', '97bd07f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bd07f1487f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c965cc920e', '97bcf7f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b97bd19801ec9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c91aa', '97b6b97bd197c36c9210c9274c920e', '97bcf7f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '9778397bd097c36c9210c9274c920e', '97b6b7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c36b0b6fc9210c8dc2', '9778397bd097c36b0b70c9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9274c91aa', '97b6b7f0e47f531b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c91aa', '97b6b7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '9778397bd097c36b0b6fc9210c8dc2', '977837f0e37f149b0723b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f5307f595b0b0bc920fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc9210c8dc2', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd097c35b0b6fc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0b0bb0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14998082b0723b06bd', '7f07e7f0e37f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e397bd07f595b0b0bc920fb0722', '977837f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f595b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e37f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f1487f531b0b0bb0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e47f149b0723b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14998082b0723b06bd', '7f07e7f0e37f14998083b0787b0721', '7f0e27f0e47f531b0723b0b6fb0722', '7f0e37f0e366aa89801eb072297c35', '7ec967f0e37f14898082b0723b02d5', '7f07e7f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66aa89801e9808297c35', '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b0721', '7f07e7f0e47f531b0723b0b6fb0722', '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b0723b02d5', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e36665b66a449801e9808297c35', '665f67f0e37f14898082b072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e26665b66a449801e9808297c35', '665f67f0e37f1489801eb072297c35', '7ec967f0e37f14998082b0787b06bd', '7f07e7f0e47f531b0723b0b6fb0721', '7f0e27f1487f531b0b0bb0b6fb0722'];

  nStr1 = ['日', '一', '二', '三', '四', '五', '六', '七', '八', '九', '十'];

  nStr2 = ['初', '十', '廿', '卅'];

  nStr3 = ['正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '冬', '腊'];

  leapMonth = function(y) {
    return LunarInfo[y - 1900] & 0xf;
  };

  leapMonthDays = function(y) {
    if (leapMonth(y)) {
      if (LunarInfo[y - 1900] & 0x10000) {
        return 30;
      } else {
        return 29;
      }
    }
    return 0;
  };

  lunarYearDays = function(y) {
    var i, sum;
    sum = 348;
    i = 0x8000;
    while (i > 0x8) {
      if (LunarInfo[y - 1900] & i) {
        sum += 1;
      }
      i >>= 1;
    }
    return sum + leapMonthDays(y);
  };

  lunarMonthDays = function(y, m) {
    if (m > 12 || m < 1) {
      return -1;
    }
    if (LunarInfo[y - 1900] & (0x10000 >> m)) {
      return 30;
    } else {
      return 29;
    }
  };

  solarDays = function(y, m) {
    var ms;
    if (m > 12 || m < 1) {
      return -1;
    }
    ms = m - 1;
    if (ms !== 1) {
      return SolarMonth[ms];
    }
    if ((y % 4 === 0) && (y % 100 !== 0) || (y % 400 === 0)) {
      return 29;
    } else {
      return 28;
    }
  };

  toGanZhi = function(offset) {
    return Gan[offset % 10] + Zhi[offset % 12];
  };

  getSolarTerm = function(y, n) {
    var _info, _table;
    if (y < 1900 || y > 2100 || n < 1 || n > 24) {
      return -1;
    }
    n -= 1;
    _table = sTermInfo[y - 1900];
    _info = parseInt('0x' + _table.substr(parseInt(n / 4) * 5, 5)).toString();
    return parseInt(_info.substr([0, 1, 3, 4][n % 4], [1, 2][n % 4 % 2]));
  };

  toChinaMonth = function(m) {
    if (m > 12 || m < 1) {
      return -1;
    } else {
      return nStr3[m - 1] + '月';
    }
  };

  toChinaDay = function(d) {
    return nStr2[Math.floor(d / 10)] + nStr1[d % 10];
  };

  getAnimal = function(y) {
    return Animals[(y - 4) % 12];
  };

  getAstronomy = function(m, d) {
    var key, value, _ref, _ref1;
    _ref = AstronomyInfo[m];
    for (key in _ref) {
      value = _ref[key];
      if (m * 100 + d >= key) {
        return value;
      }
    }
    _ref1 = AstronomyInfo[m - 1];
    for (key in _ref1) {
      value = _ref1[key];
      return value;
    }
  };

  solar2lunar = function(y, m, d) {
    var cWeek, day, dayCyclical, firstNode, gzD, gzM, gzY, i, isLeap, isSolarTerm, isToday, isTodayObj, leap, month, nWeek, objDate, offset, secondNode, sm, solarTerm, temp, term3, year, _i, _j;
    if (y < 1900 || y > 2100) {
      return -1;
    }
    if (y === 1900 && m === 1 && d < 31) {
      return -1;
    }
    objDate = new Date(y, parseInt(m - 1), d);
    leap = 0;
    temp = 0;
    y = objDate.getFullYear();
    m = objDate.getMonth() + 1;
    d = objDate.getDate();
    offset = (Date.UTC(y, m - 1, d) - Date.UTC(1900, 0, 31)) / 86400000;
    for (i = _i = 1900; _i < 2100; i = ++_i) {
      if (offset <= 0) {
        break;
      }
      temp = lunarYearDays(i);
      offset -= temp;
    }
    if (offset < 0) {
      offset += temp;
      i--;
    }
    isTodayObj = new Date();
    isToday = isTodayObj.getFullYear() === y && isTodayObj.getMonth() + 1 === m && isTodayObj.getDate() === d;
    nWeek = objDate.getDay();
    cWeek = nStr1[nWeek];
    if (nWeek === 0) {
      nWeek = 7;
    }
    year = i;
    leap = leapMonth(i);
    isLeap = false;
    for (i = _j = 1; _j < 12; i = ++_j) {
      if (offset <= 0) {
        break;
      }
      if (leap > 0 && i === (leap + 1) && isLeap === false) {
        --i;
        isLeap = true;
        temp = leapMonthDays(year);
      } else {
        temp = lunarMonthDays(year, i);
      }
      if (isLeap === true && i === leap + 1) {
        isLeap = false;
      }
      offset -= temp;
    }
    if (offset === 0 && leap > 0 && i === leap + 1) {
      if (isLeap) {
        isLeap = false;
      } else {
        isLeap = true;
        --i;
      }
    }
    if (offset < 0) {
      offset += temp;
      --i;
    }
    month = i;
    day = offset + 1;
    sm = m - 1;
    term3 = getSolarTerm(year, 3);
    gzY = toGanZhi(year - 4);
    gzY = sm < 2 && d < term3 ? toGanZhi(year - 5) : toGanZhi(year - 4);
    firstNode = getSolarTerm(y, m * 2 - 1);
    secondNode = getSolarTerm(y, m * 2);
    gzM = d < firstNode ? toGanZhi((y - 1900) * 12 + m + 11) : toGanZhi((y - 1900) * 12 + m + 12);
    isSolarTerm = false;
    solarTerm = '';
    if (firstNode === d) {
      isSolarTerm = true;
      solarTerm = SolarTerm[m * 2 - 2];
    }
    if (secondNode === d) {
      isSolarTerm = true;
      solarTerm = SolarTerm[m * 2 - 1];
    }
    dayCyclical = Date.UTC(y, sm, 1, 0, 0, 0, 0) / 86400000 + 25567 + 10;
    gzD = toGanZhi(dayCyclical + d - 1);
    return {
      'SolarYear': y,
      'SolarMonth': m,
      'SolarDay': d,
      'Week': nWeek,
      'LunarYear': year,
      'LunarMonth': month,
      'LunarDay': day,
      'LunarMonthCN': (isLeap ? '闰' : '') + toChinaMonth(month),
      'LunarDayCN': toChinaDay(day),
      'AnimalCN': getAnimal(year),
      'AstronomyCN': getAstronomy(m, d),
      'SolarTermCN': solarTerm,
      'GZYear': gzY,
      'GZMonth': gzM,
      'GZDay': gzD,
      'WeekNameCN': '星期' + cWeek,
      'isSolarTerm': isSolarTerm,
      'isToday': isToday,
      'isLeapMonth': isLeap
    };
  };

  lunar2solar = function(y, m, d, isLeapMonth) {
    var calObj, day, i, isAdd, leap, leapOffset, leap_month, offset, stmap, _i, _j;
    leapOffset = 0;
    leap_month = leapMonth(y);
    if (isLeapMonth && leap_month !== m) {
      return -1;
    }
    if ((y === 2100 && m === 12 && d > 1) || (y === 1900 && m === 1 && d < 31)) {
      return -1;
    }
    day = lunarMonthDays(y, m);
    if (y < 1900 || y > 2100 || d > day) {
      return -1;
    }
    offset = 0;
    for (i = _i = 1900; 1900 <= y ? _i < y : _i > y; i = 1900 <= y ? ++_i : --_i) {
      offset += lunarYearDays(i);
    }
    leap = 0;
    isAdd = false;
    for (i = _j = 1; 1 <= m ? _j < m : _j > m; i = 1 <= m ? ++_j : --_j) {
      leap = leapMonth(y);
      if (!isAdd && (leap <= i && leap > 0)) {
        offset += leapMonthDays(y);
        isAdd = true;
      }
      offset += lunarMonthDays(y, i);
    }
    if (isLeapMonth) {
      offset += day;
    }
    stmap = Date.UTC(1900, 1, 30, 0, 0, 0);
    calObj = new Date((offset + d - 31) * 86400000 + stmap);
    return solar2lunar(calObj.getUTCFullYear(), calObj.getUTCMonth() + 1, calObj.getUTCDate());
  };

  this.SuperCalendar = {
    lunar2solar: lunar2solar,
    solar2lunar: solar2lunar,
    leapMonth: leapMonth,
    leapMonthDays: leapMonthDays,
    lunarYearDays: lunarYearDays,
    lunarMonthDays: lunarMonthDays,
    solarDays: solarDays,
    getSolarTerm: getSolarTerm,
    getAnimal: getAnimal,
    getAstronomy: getAstronomy
  };

  console.log(this.SuperCalendar.lunar2solar(2015, 1, 28));

}).call(this);
